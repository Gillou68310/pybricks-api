# SPDX-License-Identifier: MIT
# Copyright (c) 2018-2022 The Pybricks Authors

"""ParamÃ¨tres/arguments constants pour l'API Pybricks."""

from __future__ import annotations

from enum import Enum
from typing import Union, TYPE_CHECKING
import os

from .tools import Matrix as _Matrix, vector as _vector

if TYPE_CHECKING or os.environ.get("SPHINX_BUILD") == "True":
    Number = Union[int, float]
    """
    Les nombres peuvent Ãªtre reprÃ©sentÃ©s comme des entiers ou des valeurs Ã  virgule flottante :

        * Les entiers (:class:`int <ubuiltins.int>`) sont des nombres entiers
          comme ``15`` ou ``-123``.
        * Les valeurs Ã  virgule flottante (:class:`float <ubuiltins.float>`) sont des nombres dÃ©cimaux
          comme ``3.14`` ou ``-123.45``.

    Si vous voyez :class:`Number` comme type d'argument, les deux
    :class:`int <ubuiltins.int>` et :class:`float <ubuiltins.float>` peuvent Ãªtre utilisÃ©s.

    Par exemple, :func:`wait(15) <pybricks.tools.wait>` et
    :func:`wait(15.75) <pybricks.tools.wait>` sont tous deux autorisÃ©s. Dans la plupart des fonctions,
    cependant, votre valeur d'entrÃ©e sera tronquÃ©e Ã  un nombre entier de toute faÃ§on. Dans cet
    exemple, l'une ou l'autre commande fait que le programme s'arrÃªte pendant seulement 15 millisecondes.

    .. note::
        Le hub BOOST Move ne prend pas en charge les nombres Ã  virgule flottante en raison
        de ressources systÃ¨me limitÃ©es. Seuls les entiers peuvent Ãªtre utilisÃ©s sur ce hub.
    """


class _PybricksEnumMeta(type(Enum)):
    @classmethod
    def __dir__(cls):
        yield "__class__"
        yield "__name__"
        for member in cls:
            yield member.name


class _PybricksEnum(Enum, metaclass=_PybricksEnumMeta):
    def __dir__(self):
        yield "__class__"
        for member in type(self):
            yield member.name

    def __str__(self):
        return "{}.{}".format(type(self).__name__, self.name)

    def __repr__(self):
        return str(self)


class Axis:
    """Axes unitaires d'un systÃ¨me de coordonnÃ©es.

    .. data:: X = vector(1, 0, 0)
    .. data:: Y = vector(0, 1, 0)
    .. data:: Z = vector(0, 0, 1)

    """

    X: _Matrix = _vector(1, 0, 0)
    Y: _Matrix = _vector(0, 1, 0)
    Z: _Matrix = _vector(0, 0, 1)


class Color:
    """Couleur de la lumiÃ¨re ou de la surface."""

    NONE: Color = ...
    BLACK: Color = ...
    GRAY: Color = ...
    WHITE: Color = ...
    RED: Color = ...
    ORANGE: Color = ...
    BROWN: Color = ...
    YELLOW: Color = ...
    GREEN: Color = ...
    CYAN: Color = ...
    BLUE: Color = ...
    VIOLET: Color = ...
    MAGENTA: Color = ...

    def __init__(self, h: Number, s: Number = 100, v: Number = 100):
        """Color(h, s=100, v=100)

        Arguments:
            h (Number, deg): Teinte.
            s (Number, %): Saturation.
            v (Number, %): Valeur de luminositÃ©.
        """

        self.h = int(h) % 360
        """
        La teinte.
        """

        self.s = max(0, min(int(s), 100))
        """
        La saturation.
        """

        self.v = max(0, min(int(v), 100))
        """
        La valeur de luminositÃ©.
        """

    def __repr__(self):
        return "Color(h={}, s={}, v={})".format(self.h, self.s, self.v)

    def __eq__(self, other: Color) -> bool: ...

    def __mul__(self, scale: float) -> Color:
        v = max(0, min(self.v * scale, 100))
        return Color(self.h, self.s, int(v), self.name)

    def __rmul__(self, scale: float) -> Color:
        return self.__mul__(scale)

    def __truediv__(self, scale: float) -> Color:
        return self.__mul__(1 / scale)

    def __floordiv__(self, scale: int) -> Color:
        return self.__mul__(1 / scale)


Color.NONE = Color(0, 0, 0)
Color.BLACK = Color(0, 0, 10)
Color.GRAY = Color(0, 0, 50)
Color.WHITE = Color(0, 0, 100)
Color.RED = Color(0, 100, 100)
Color.ORANGE = Color(30, 100, 100)
Color.BROWN = Color(30, 100, 50)
Color.YELLOW = Color(60, 100, 100)
Color.GREEN = Color(120, 100, 100)
Color.CYAN = Color(180, 100, 100)
Color.BLUE = Color(240, 100, 100)
Color.VIOLET = Color(270, 100, 100)
Color.MAGENTA = Color(300, 100, 100)


class Port(_PybricksEnum):
    """Port sur la brique programmable ou le hub."""

    # Generic motor/sensor ports
    A: Port = ord("A")
    B: Port = ord("B")
    C: Port = ord("C")
    D: Port = ord("D")
    E: Port = ord("E")
    F: Port = ord("F")

    # NXT/EV3 sensor ports
    S1: Port = ord("1")
    S2: Port = ord("2")
    S3: Port = ord("3")
    S4: Port = ord("4")


class Stop(_PybricksEnum):
    """Action aprÃ¨s que le moteur s'arrÃªte ou atteint sa cible."""

    COAST: Stop = 0
    """Laisser le moteur se dÃ©placer librement."""

    COAST_SMART: Stop = 4
    """
    Laisser le moteur se dÃ©placer librement. Pour la prochaine manÅ“uvre d'angle relatif,
    prendre le dernier angle cible (au lieu de l'angle actuel) comme nouveau
    point de dÃ©part. Cela rÃ©duit les erreurs cumulatives. Cela s'appliquera uniquement si
    l'angle actuel est infÃ©rieur Ã  deux fois la tolÃ©rance de position configurÃ©e.
    """

    BRAKE: Stop = 1
    """RÃ©sister passivement aux petites forces externes."""

    HOLD: Stop = 2
    """Continuer Ã  contrÃ´ler le moteur pour le maintenir Ã  l'angle commandÃ©."""

    NONE: Stop = 3
    """
    Ne pas dÃ©cÃ©lÃ©rer en approchant de la position cible. Cela peut Ãªtre utilisÃ©
    pour enchaÃ®ner plusieurs manÅ“uvres de moteur ou de base mobile sans s'arrÃªter. Si
    aucune autre commande n'est donnÃ©e, le moteur continuera Ã  fonctionner indÃ©finiment
    Ã  la vitesse donnÃ©e.
    """


class Direction(_PybricksEnum):
    """Direction de rotation pour les valeurs de vitesse ou d'angle positives."""

    CLOCKWISE: Direction = 0
    """Une valeur de vitesse positive doit faire tourner le moteur dans le sens horaire."""

    COUNTERCLOCKWISE: Direction = 1
    """Une valeur de vitesse positive doit faire tourner le moteur dans le sens antihoraire."""


class Button(_PybricksEnum):
    """Boutons sur un hub ou une tÃ©lÃ©commande."""

    LEFT_DOWN: Button = 1
    LEFT_MINUS: Button = 1
    DOWN: Button = 2
    RIGHT_DOWN: Button = 3
    RIGHT_MINUS: Button = 3
    LEFT: Button = 4
    CENTER: Button = 5
    RIGHT: Button = 6
    LEFT_UP: Button = 7
    LEFT_PLUS: Button = 7
    UP: Button = 8
    BEACON: Button = 8
    RIGHT_UP: Button = 9
    RIGHT_PLUS: Button = 9
    BLUETOOTH: Button = 9
    A: Button = 0
    B: Button = 0
    X: Button = 0
    Y: Button = 0
    LB: Button = 0
    RB: Button = 0
    LJ: Button = 0
    RJ: Button = 0
    P1: Button = 0
    P2: Button = 0
    P3: Button = 0
    P4: Button = 0
    GUIDE: Button = 0
    MENU: Button = 0
    UPLOAD: Button = 0
    VIEW: Button = 0


class Side(_PybricksEnum):
    """CÃ´tÃ© d'un hub ou d'un capteur."""

    RIGHT: Side = 6
    FRONT: Side = 0
    TOP: Side = 8
    LEFT: Side = 4
    BACK: Side = 5
    BOTTOM: Side = 2


class Icon:
    """IcÃ´nes Ã  afficher sur une matrice lumineuse.

    Chacune des attributs suivants est une matrice. Cela signifie que vous pouvez
    redimensionner les icÃ´nes pour ajuster la luminositÃ© ou ajouter des icÃ´nes pour crÃ©er des composites.
    """

    UP: _Matrix = ...
    """
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    """
    DOWN: _Matrix = ...
    """
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    """
    LEFT: _Matrix = ...
    """
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    """
    RIGHT: _Matrix = ...
    """
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    """
    ARROW_RIGHT_UP: _Matrix = ...
    """
    | â¬œâ¬œğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œğŸŸ¨ğŸŸ¨
    | â¬œâ¬œğŸŸ¨â¬œğŸŸ¨
    | â¬œğŸŸ¨â¬œâ¬œâ¬œ
    | ğŸŸ¨â¬œâ¬œâ¬œâ¬œ
    """
    ARROW_RIGHT_DOWN: _Matrix = ...
    """
    | ğŸŸ¨â¬œâ¬œâ¬œâ¬œ
    | â¬œğŸŸ¨â¬œâ¬œâ¬œ
    | â¬œâ¬œğŸŸ¨â¬œğŸŸ¨
    | â¬œâ¬œâ¬œğŸŸ¨ğŸŸ¨
    | â¬œâ¬œğŸŸ¨ğŸŸ¨ğŸŸ¨
    """
    ARROW_LEFT_UP: _Matrix = ...
    """
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œâ¬œ
    | ğŸŸ¨ğŸŸ¨â¬œâ¬œâ¬œ
    | ğŸŸ¨â¬œğŸŸ¨â¬œâ¬œ
    | â¬œâ¬œâ¬œğŸŸ¨â¬œ
    | â¬œâ¬œâ¬œâ¬œğŸŸ¨
    """
    ARROW_LEFT_DOWN: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œğŸŸ¨
    | â¬œâ¬œâ¬œğŸŸ¨â¬œ
    | ğŸŸ¨â¬œğŸŸ¨â¬œâ¬œ
    | ğŸŸ¨ğŸŸ¨â¬œâ¬œâ¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œâ¬œ
    """
    ARROW_UP: _Matrix = ...
    """
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | ğŸŸ¨â¬œğŸŸ¨â¬œğŸŸ¨
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    """
    ARROW_DOWN: _Matrix = ...
    """
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | ğŸŸ¨â¬œğŸŸ¨â¬œğŸŸ¨
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    """
    ARROW_LEFT: _Matrix = ...
    """
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | â¬œğŸŸ¨â¬œâ¬œâ¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œğŸŸ¨â¬œâ¬œâ¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    """
    ARROW_RIGHT: _Matrix = ...
    """
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | â¬œâ¬œâ¬œğŸŸ¨â¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œğŸŸ¨â¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    """
    HAPPY: _Matrix = ...
    """
    | ğŸŸ¨ğŸŸ¨â¬œğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨â¬œğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | ğŸŸ¨â¬œâ¬œâ¬œğŸŸ¨
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    """
    SAD: _Matrix = ...
    """
    | ğŸŸ¨ğŸŸ¨â¬œğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨â¬œğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | ğŸŸ¨â¬œâ¬œâ¬œğŸŸ¨
    """
    EYE_LEFT: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | ğŸŸ¨ğŸŸ¨â¬œâ¬œâ¬œ
    | ğŸŸ¨ğŸŸ¨â¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    EYE_RIGHT: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    EYE_LEFT_BLINK: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | ğŸŸ¨ğŸŸ¨â¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    EYE_RIGHT_BLINK: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    EYE_RIGHT_BROW: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    EYE_LEFT_BROW: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | ğŸŸ¨ğŸŸ¨â¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    EYE_LEFT_BROW_UP: _Matrix = ...
    """
    | ğŸŸ¨ğŸŸ¨â¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    EYE_RIGHT_BROW_UP: _Matrix = ...
    """
    | â¬œâ¬œâ¬œğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    HEART: _Matrix = ...
    """
    | â¬œğŸŸ¨â¬œğŸŸ¨â¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    """
    PAUSE: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œğŸŸ¨â¬œğŸŸ¨â¬œ
    | â¬œğŸŸ¨â¬œğŸŸ¨â¬œ
    | â¬œğŸŸ¨â¬œğŸŸ¨â¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    EMPTY: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    FULL: _Matrix = ...
    """
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    """
    SQUARE: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    TRIANGLE_RIGHT: _Matrix = ...
    """
    | â¬œğŸŸ¨â¬œâ¬œâ¬œ
    | â¬œğŸŸ¨ğŸŸ¨â¬œâ¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œğŸŸ¨ğŸŸ¨â¬œâ¬œ
    | â¬œğŸŸ¨â¬œâ¬œâ¬œ
    """
    TRIANGLE_LEFT: _Matrix = ...
    """
    | â¬œâ¬œâ¬œğŸŸ¨â¬œ
    | â¬œâ¬œğŸŸ¨ğŸŸ¨â¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œâ¬œğŸŸ¨ğŸŸ¨â¬œ
    | â¬œâ¬œâ¬œğŸŸ¨â¬œ
    """
    TRIANGLE_UP: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    TRIANGLE_DOWN: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    CIRCLE: _Matrix = ...
    """
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    """
    CLOCKWISE: _Matrix = ...
    """
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ
    | ğŸŸ¨â¬œâ¬œğŸŸ¨â¬œ
    | ğŸŸ¨â¬œâ¬œğŸŸ¨â¬œ
    | ğŸŸ¨â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œâ¬œâ¬œğŸŸ¨â¬œ
    """
    COUNTERCLOCKWISE: _Matrix = ...
    """
    | â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨
    | â¬œğŸŸ¨â¬œâ¬œğŸŸ¨
    | â¬œğŸŸ¨â¬œâ¬œğŸŸ¨
    | ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œğŸŸ¨
    | â¬œğŸŸ¨â¬œâ¬œâ¬œ
    """
    TRUE: _Matrix = ...
    """
    | â¬œâ¬œâ¬œâ¬œğŸŸ¨
    | â¬œâ¬œâ¬œğŸŸ¨â¬œ
    | ğŸŸ¨â¬œğŸŸ¨â¬œâ¬œ
    | â¬œğŸŸ¨â¬œâ¬œâ¬œ
    | â¬œâ¬œâ¬œâ¬œâ¬œ
    """
    FALSE: _Matrix = ...
    """
    | ğŸŸ¨â¬œâ¬œâ¬œğŸŸ¨
    | â¬œğŸŸ¨â¬œğŸŸ¨â¬œ
    | â¬œâ¬œğŸŸ¨â¬œâ¬œ
    | â¬œğŸŸ¨â¬œğŸŸ¨â¬œ
    | ğŸŸ¨â¬œâ¬œâ¬œğŸŸ¨
    """
